Add this content ot logstash.conf file

input {
  tcp {
    port => 5000
    codec => json
  }
  file {
    type => "doc"
    # Logstash insists on absolute paths...
    path => "/var/log/application.log"
    codec => "json"
  }
}
filter {
  geoip {
    source => "clientip"
    target => "geoip"
  }
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }
}
output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{appname}"
  }
}




Now add the below content to docker-compose.yml



version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.1
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_MONITORING_ENABLED=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - logging-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.8.1
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - XPACK_SECURITY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_MONITORING_ENABLED=false
      - ELASTIC_HOST=elasticsearch:9200
    ports:
      - 5000:5000
    volumes:
      - /root/logstash.conf:/usr/share/logstash/config/logstash.conf:ro
      - /root/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - logging-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.1
    restart: unless-stopped
    depends_on:
      - logstash
    ports:
      - 5601:5601
    networks:
      - logging-network

networks:
  logging-network:
    driver: bridge





Start the containers using docker-compose up -d
