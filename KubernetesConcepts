Objects are organized as

Kind - Pod, Service, Deployment, Persistenvolumes
Group - core,apps,storage
version - v1, beta,alpha


Api groups

core api (legacy) 
 - (http://APISERVER:APISERVERPORT/api/$VERSION/$RESOURCE_TYPE)
 - for namespace (http://APISERVER:APISERVERPORT/api/$VERSION/$RESOURCE_TYPE/namespaces/$NAMESPACE/$RESOURCE_TYPE/$RESOURCE_NAME)


named api
- http://APISERVER:APISERVERPORT/api/$GROUPNAME/$VERSION/$RESOURCE_TYPE
- http://APISERVER:APISERVERPORT/api/$GROUPNAME/$VERSION/namespaces/$NAMESPACE/$RESOURCE_TYPE/$RESOURCE_NAME



Response code
200 - success
400 - client error
500 -server error


core api
- pod
- node
- namespace
- persistent volume
- persistent volume claim


named api

apps - deployment
storage.k8s.io - StorageClass
rbac.authorization.k8s.io - Role


Api is versioned. Enables forward change

Alpha -> Beta -> Stable

No direct relation to release versions

Any http client which follows the api can send request to kubernetes server and not only kubectl

Each resource has a resourceVersion



Organizing objects
- annotations, labels and namespaces


Not all objects belongs to namespaces for eg: persistent volumes, nodes


Namespaces


default, kube-system, kube-public

Namespace must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character




Labels are key value apirs
Max lenght of key is 63 and max length of value is 253

Controllers and services match pods using labels
Influencing pod scheduling
Using labels we can deploy pods on specific hardware
Services sends http requests to pods using labels


"nodeSelector" tells the scheduler where to deploy the pod


Annotations are key value pair used to add additional information to resource

Annotatations cant be used query pods or resources
key length can be 63 value lengths are 256kb



Pods:

Contains one or more containers
Unit of scheduling/deployment

Controllers keep pods in desired state. They stop/start the pods. used for scaling
Not good to run bare/naked pods which means they are not under the control of replication set



Multiple container pods:

Need to be careful about port conflicts
volumes are defined at pod level. shared among containers in pod. common way for containers to share data


When we ssh to multicontainer pods, by default it ssh to first container in it. Use "--container <container name>" to ssh
to particular container



Lifecycle of a pod:

creation -> Running -> Termination


